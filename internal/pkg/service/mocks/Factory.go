// Code generated by mockery v2.31.1. DO NOT EDIT.

package mocks

import (
	service "github.com/kyrylolytvynovskyi/lets-go-chat/internal/pkg/service"
	mock "github.com/stretchr/testify/mock"
)

// Factory is an autogenerated mock type for the Factory type
type Factory struct {
	mock.Mock
}

// CreateUserService provides a mock function with given fields:
func (_m *Factory) CreateUserService() (service.User, error) {
	ret := _m.Called()

	var r0 service.User
	var r1 error
	if rf, ok := ret.Get(0).(func() (service.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() service.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFactory creates a new instance of Factory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *Factory {
	mock := &Factory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
