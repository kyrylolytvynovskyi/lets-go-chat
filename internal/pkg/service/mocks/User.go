// Code generated by mockery v2.31.1. DO NOT EDIT.

package mocks

import (
	model "github.com/kyrylolytvynovskyi/lets-go-chat/internal/pkg/model"
	service "github.com/kyrylolytvynovskyi/lets-go-chat/internal/pkg/service"
	mock "github.com/stretchr/testify/mock"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

// Clone provides a mock function with given fields:
func (_m *User) Clone() service.User {
	ret := _m.Called()

	var r0 service.User
	if rf, ok := ret.Get(0).(func() service.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.User)
		}
	}

	return r0
}

// CreateUser provides a mock function with given fields: req
func (_m *User) CreateUser(req model.CreateUserRequest) (model.CreateUserResponse, error) {
	ret := _m.Called(req)

	var r0 model.CreateUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(model.CreateUserRequest) (model.CreateUserResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(model.CreateUserRequest) model.CreateUserResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(model.CreateUserResponse)
	}

	if rf, ok := ret.Get(1).(func(model.CreateUserRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: req
func (_m *User) LoginUser(req model.LoginUserRequest) (model.LoginUserResponse, error) {
	ret := _m.Called(req)

	var r0 model.LoginUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(model.LoginUserRequest) (model.LoginUserResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(model.LoginUserRequest) model.LoginUserResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(model.LoginUserResponse)
	}

	if rf, ok := ret.Get(1).(func(model.LoginUserRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUser creates a new instance of User. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *User {
	mock := &User{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
